def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}


node{

def mavenHome = tool name: "maven 3.9.4"

echo "The node name is :${env.NODE_NAME}"
echo "The job name is :${env.JOB_NAME}"
echo "The build number is :${env.BUILD_NUMBER}"

buildName 'Dev -${BUILD_NUMBER}'
buildDescription 'pipeline scripted way'

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: '']])
try{
//checkout stage
stage('checkout code'){
git branch: 'development', credentialsId: 'git cred', url: 'https://github.com/Organi2/maven-web-application.git'
}

//build stage
stage('build'){
bat "$mavenHome/bin/mvn clean package"
}

//sonarqube report

stage('generatesonar'){
bat "$mavenHome/bin/mvn sonar:sonar"
}

//upload to artifactory repo
stage('upload artifact'){
bat "$mavenHome/bin/mvn deploy"
}


}
catch(e){
currentBuild.result='FAILED'
}
finally{
notifyBuild(currentBuild.result)
}

}
